Index: src/tools/http/http.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/tools/http/http.js	(date 1623221537000)
+++ src/tools/http/http.js	(date 1623221537000)
@@ -0,0 +1,111 @@
+import axios from 'axios'
+import Vue from 'vue'
+import {Message} from 'element-ui'
+import NProgress from 'nprogress'
+
+axios.defaults.baseURL = process.env.BASE_URL
+axios.interceptors.request.use(config => {
+  NProgress.start()
+  return config
+}, error => {
+  return Promise.reject(error)
+})
+
+axios.interceptors.response.use(response => response, error => Promise.resolve(error.response))
+
+function checkStatus (response) {
+  NProgress.done()
+  if (response.status === 200 || response.status === 304) {
+    return response
+  }
+  if (response.status >= 500) {
+    return {
+      data: {
+        code: -500,
+        status: false,
+        message: response.statusText,
+        data: response.statusText
+      }
+    }
+  }
+  return {
+    data: {
+      code: -404,
+      status: false,
+      message: response.statusText,
+      data: response.statusText
+    }
+  }
+}
+
+function checkCode (res, errMsg) {
+  if (!res.data.status) {
+    switch (res.data.code) {
+      case -404:
+        Message.error(res.data.message || '未知异常')
+        break
+      case -500:
+        Message.error('服务器连接错误！')
+        break
+      case 70005:
+        Message.error('您需要重新登录！')
+        break
+      default:
+        errMsg ? Message.error(errMsg) : Message.error(res.data.message || '未知异常')
+    }
+  }
+  return res.data
+}
+
+export default {
+  POST (url, data, errMsg) {
+    const CancelToken = axios.CancelToken
+    return axios.post(url, data, {
+      timeout: 30000,
+      cancelToken: new CancelToken(function executor (c) {
+        Vue.$httpRequestList.push(c)
+      })
+    }).then(checkStatus).then(res => checkCode(res, errMsg))
+  },
+  GET (url, params, errMsg) {
+    const CancelToken = axios.CancelToken
+    return axios.get(url, {
+      params: {
+        _t: +(new Date()),
+        ...params
+      },
+      timeout: 30000,
+      cancelToken: new CancelToken(function executor (c) {
+        Vue.$httpRequestList.push(c)
+      })
+    }).then(checkStatus).then(res => checkCode(res, errMsg))
+  },
+  DELETE (url, errMsg) {
+    const CancelToken = axios.CancelToken
+    return axios.delete(url, {
+      timeout: 30000,
+      cancelToken: new CancelToken(function executor (c) {
+        Vue.$httpRequestList.push(c)
+      })
+    }).then(checkStatus).then(res => checkCode(res, errMsg))
+  },
+  PUT (url, data, errMsg) {
+    const CancelToken = axios.CancelToken
+    return axios.put(url, data, {
+      timeout: 30000,
+      cancelToken: new CancelToken(function executor (c) {
+        Vue.$httpRequestList.push(c)
+      })
+    }).then(checkStatus).then(res => checkCode(res, errMsg))
+  },
+  EXPORT (url, data, errMsg) {
+    const CancelToken = axios.CancelToken
+    return axios.post(url, data, {
+      responseType: 'blob',
+      timeout: 30000,
+      cancelToken: new CancelToken(function executor (c) {
+        Vue.$httpRequestList.push(c)
+      })
+    }).then(checkStatus).then(res => res.data)
+  }
+}
Index: src/tools/http/httpRequestList.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/tools/http/httpRequestList.js	(date 1623221537000)
+++ src/tools/http/httpRequestList.js	(date 1623221537000)
@@ -0,0 +1,10 @@
+import Vue from 'vue'
+
+export const clearHttpRequestingList = () => {
+  if (Vue.$httpRequestList.length > 0) {
+    Vue.$httpRequestList.forEach((item) => {
+      item()
+    })
+    Vue.$httpRequestList = []
+  }
+}
Index: src/tools/utils.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/tools/utils.js	(date 1623221537000)
+++ src/tools/utils.js	(date 1623221537000)
@@ -0,0 +1,59 @@
+export function _isType (t) {
+  return Object.prototype.toString.call(t).slice(8, -1).toLowerCase()
+}
+
+export function _saveLocalStorage (key, value) {
+  if (_isType(value) === 'string') {
+    localStorage.setItem(key, value)
+  } else {
+    let Info = JSON.stringify(value)
+    localStorage.setItem(key, Info)
+  }
+}
+
+export function _getLocalStorage (item) {
+  return localStorage.getItem(item)
+}
+
+export function _clearStorage () {
+  localStorage.clear()
+}
+
+export function _getCookie (cName) {
+  let cStart, cEnd
+  if (document.cookie.length > 0) {
+    cStart = document.cookie.indexOf(cName + '=')
+    if (cStart !== -1) {
+      cStart = cStart + cName.length + 1
+      cEnd = document.cookie.indexOf(';', cStart)
+      if (cEnd === -1) cEnd = document.cookie.length
+      return document.cookie.slice(cStart, cEnd)
+    }
+  }
+  return ''
+}
+
+export function _keyMirror (obj) {
+  if (obj instanceof Object) {
+    var _obj = Object.assign({}, obj)
+    var _keyArray = Object.keys(obj)
+    _keyArray.forEach((key) => {
+      _obj[key] = key
+      return true
+    })
+    return _obj
+  }
+}
+
+export function _isArrayFn (value) {
+  if (typeof Array.isArray === 'function') {
+    return Array.isArray(value)
+  } else {
+    return Object.prototype.toString.call(value) === '[object Array]'
+  }
+}
+
+export function _pagination (pageNo, pageSize, array) {
+  let offset = (pageNo - 1) * pageSize
+  return (offset + pageSize >= array.length) ? array.slice(offset, array.length) : array.slice(offset, offset + pageSize)
+}
